package main

import "fmt"

func main() {
	/*
		Дана последовательность, состоящая из целых чисел.
		Напишите программу, которая подсчитывает количество положительных чисел среди элементов последовательности.
	*/
	var n int
	fmt.Scan(&n)
	a := [100]int{}
	for i := 0; i < n; i++ {
		fmt.Scan(&a[i])
	}
	var k = 0
	for i := 0; i < n; i++ {
		if a[i] > 0 {
			k++
		}

	}
	fmt.Print(k)
	maxx()
}

/*
На ввод подаются пять целых чисел, которые записываются в массив. Однако эта часть программы уже написана.

	Вам нужно написать фрагмент кода, с помощью которого можно найти и вывести максимальное число в этом массиве.
*/
func maxx() {
	array := [5]int{}
	var a int
	for i := 0; i < 5; i++ {
		fmt.Scan(&a)
		array[i] = a
	}
	maxs := array[0]
	for i := 0; i < len(array); i++ {
		if array[i] > maxs {
			maxs = array[i]
		}
	}
	fmt.Print(maxs)
}

/*
Напишите программу, принимающая на вход число N (N \geq 4)N(N≥4), а затем NN целых чисел-элементов среза.

	На вывод нужно подать 4-ый (3 по индексу) элемент данного среза.
*/
func ind(n int) {
	a := make([]int, n, n)
	for i := 0; i < len(a); i++ {
		fmt.Scan(&a[i])
	}
	fmt.Print(a[3])
}

/*
Дан массив, состоящий из целых чисел. Нумерация элементов начинается с 0.
Напишите программу, которая выведет элементы массива, индексы которых четны (0, 2, 4...).
*/
func ind_even(n int) {
	a := [100]int{}
	for i := 0; i < n; i++ {
		fmt.Scan(&a[i])
	}
	for i := 0; i < n; i++ {
		if i%2 == 0 {
			fmt.Print(a[i], " ")
		}

	}
}

/*
Дана последовательность, состоящая из целых чисел.
Напишите программу, которая подсчитывает количество положительных чисел среди элементов последовательности.
*/
func count_even(n int) {
	a := [100]int{}
	for i := 0; i < n; i++ {
		fmt.Scan(&a[i])
	}
	var k = 0
	for i := 0; i < n; i++ {
		if a[i] > 0 {
			k++
		}

	}
	fmt.Print(k)
}

/*
Внутри функции main (объявлять функцию не нужно) необходимо написать программу:

На первом этапе на стандартный ввод подается 10 целых положительных чисел, которые должны быть записаны в порядке ввода в массив из 10 элементов.
Тип чисел, входящих в массив, должен соответствовать минимально возможному целому беззнаковому числу.
Имя массива который вы должны сами создать workArray (условие обязательное). Для чтения из стандартного ввода уже импортирован пакет fmt.
На втором этапе на стандартный ввод подаются еще 3 пары чисел - индексы элементов этого массива, которые требуется поменять местами
(если такая пара чисел 3 и 7, значит в массиве элемент с 3 индексом нужно поменять местами с элементом, индекс которого 7).
Элементы полученного массива должны быть выведены через пробел на стандартный вывод. Далее автоматически будет проведена проверка используемых типов,
результат которой будет добавлен к вашему ответу.
*/
func f() {
	workArray := [10]uint8{}
	for i := 0; i < len(workArray); i++ {
		fmt.Scan(&workArray[i])
	}
	buf := [6]int{}
	for i := 0; i < len(buf); i++ {
		fmt.Scan(&buf[i])
	}
	var elem uint8
	for i := 0; i < len(buf); i++ {
		if i%2 == 0 {
			elem = workArray[buf[i]]
			workArray[buf[i]] = workArray[buf[i+1]]
			workArray[buf[i+1]] = elem
		}
	}
	for i := 0; i < len(workArray); i++ {
		fmt.Print(workArray[i], " ")
	}

}

/*
На вход подается число типа float64. Вам нужно вывести преобразованное число по правилу:
число возводится в квадрат, затем обрезается дробная часть так что остается 4 знака после запятой. Но если число равно или меньше нуля - выводить:
"число R не подходит", где R - исходное число с 2 цифрами после запятой и с 2 по ширине.
А если число больше чем 10 000 - выводить исходное число в экспоненциальном представлении (знак экспоненты в нижнем регистре).
*/
func format(x float64) {
	if x <= 0 {
		fmt.Printf("число %2.2f не подходит", x)
	} else if x > 10000 {
		fmt.Printf("%e", x)
	} else {
		x = x * x
		fmt.Printf("%.4f", x)
	}
}

/*
Последовательность состоит из натуральных чисел и завершается числом 0.
Определите количество элементов этой последовательности, которые равны ее наибольшему элементу.
*/
func count_max() {
	var a int
	var s = -1
	var k = 0
	for fmt.Scan(&a); a != 0; fmt.Scan(&a) {
		if a > s {
			s = a
			k = 0
			k++
			//fmt.Print(1)
		} else if a == s {
			k++
			//fmt.Print(1)
		}

	}
	if s == -1 {
		fmt.Print(1)
	} else {
		fmt.Print(k)
	}
}

/*
Найдите первое число от 1 до n включительно, кратное c, но НЕ кратное d.
*/
func g(n, c, d int) {
	for i := 1; i <= n; i++ {
		if (i%c == 0) && (i%d != 0) {
			fmt.Println(i)
			break
		}
	}

}

/*
Напишите программу, которая считывает целые числа с консоли по одному числу в строке.

Для каждого введённого числа проверить:

если число меньше 10, то пропускаем это число;
если число больше 100, то прекращаем считывать числа;
в остальных случаях вывести это число обратно на консоль в отдельной строке.
*/
func input() {
	var n int

	for i := 1; true; i++ {
		fmt.Scanln(&n)
		if n < 10 {
			continue
		} else if n > 100 {
			break
		} else {
			fmt.Println(n)
		}
	}
}

/*
Вклад в банке составляет x рублей. Ежегодно он увеличивается на p процентов, после чего дробная часть копеек отбрасывается.
Каждый год сумма вклада становится больше. Определите, через сколько лет вклад составит не менее y рублей.
*/
func vklad(x, p, y int) {
	k := 0
	for x <= y {
		x = x + (x*p)/100
		k++
	}
	fmt.Println(k)
}

/*
Даны два числа. Определить цифры, входящие в запись как первого, так и второго числа.
*/
func h(x, y int) {
	b := y
	c := 0
	for x > 0 {
		for y > 0 {
			if x%10 == y%10 {
				c = c*10 + x%10
				//fmt.Print(c)
				//fmt.Print(x%10, " ")
				break
			} else {
				y = y / 10
			}

		}
		x = x / 10
		y = b

	}
	for c > 0 {
		fmt.Print(c%10, " ")
		c = c / 10
	}
}

/*
По данному трехзначному числу определите, все ли его цифры различны.
*/
func dif(a int) {
	switch {
	case ((a % 10) != (a / 100)) && ((a / 100) != (a / 10 % 10)) && ((a % 10) != (a / 10 % 10)):
		fmt.Print("YES")
	default:
		fmt.Print("NO")
	}
}

/*
	Определите является ли билет счастливым. Счастливым считается билет,

в шестизначном номере которого сумма первых трёх цифр совпадает с суммой трёх последних.
*/
func palindrom(a int) {
	switch {
	case (a%10 + a/10%10 + a/100%10) == (a/100000 + a/1000%10 + a/10000%10):
		fmt.Print("YES")
	default:
		fmt.Println("NO")
	}
}
